// loop through the screen pixels, and set them all white, then black, etc etc
main:
	WhileY:
		//While(CurrY < 480)
		PUSHW EndWhileY
		PUSHW CurrY
		LW
		PUSHW 480
		LESS
		NOT
		JIF		
		
		WhileX:
			//While(Currx < 640)
			PUSHW EndWhileX
			PUSHW CurrX
			LW
			PUSHW 640
			LESS
			NOT
			JIF	
			
			//call draw white or draw black depedning on flags
			BEGINARGS
			
			// curr x and curr y are the first two arguments of both funtions
			PUSHW CurrX
			LW
			PUSHW CurrY
			LW
			
			PUSHW Else
			PUSHW DrawWhite
			LW
			NOT
			JIF
			
			//if(drawWhite)
			If:
				//WriteWhite(CurrX,CurrY)
				PUSHW WriteWhite
				CALL
				
				PUSHW EndIf
				JMP
			Else:
				//WriteBlack(CurrX,CurrY)
				PUSHW WriteBlack
				CALL
			EndIf:
			
			//CurrX++
			PUSHW CurrX
			PUSHW CurrX
			LW
			PUSHW 1
			ADD
			SW
		EndWhileX:
		
		//CurrX = 0
		PUSHW CurrX
		PUSHW 0
		SW
		
		//CurrY++
		PUSHW CurrY
		PUSHW CurrY
		LW
		PUSHW 1
		ADD
		SW
		
	EndWhileY:
	PUSHW CurrY
	PUSHW 0
	SW
	
	PUSHW DrawWhite
	PUSHW DrawWhite
	LW
	NOT
	SW
	
	//while(true)
	PUSHW main
	JMP
/*
	void WriteWhite(WORD PixX,WORD PixY)
	{
		WriteScreen(PixX,PixY,-1,-1,-1)
	}
*/

WriteWhite:
	BEGINARGS
	PUSHBP
	PUSHW 8
	LW
	PUSHBP
	PUSHW 12
	LW
	PUSHW -1
	PUSHW -1
	PUSHW -1
	PUSHW WriteScreen
	CALL
	RET

/*
	void WriteBlack(WORD PixX,WORD PixY)
	{
		WriteScreen(PixX,PixY,0,0,0)
	}
*/
WriteBlack:
	BEGINARGS
	//get PixX
	PUSHBP
	PUSHW 8
	LW
	//get pixy
	PUSHBP
	PUSHW 12
	LW
	//push zeros
	PUSHW 0
	PUSHW 0
	PUSHW 0
	// WriteScreen(PixX,PixY,0,0,0)
	PUSHW WriteScreen
	CALL
	RET


/*
	void WriteScreen(WORD PixX,WORD PixY,WORD R,WORD G,WORD B)
	{
		int pixlocation = pixY * 640 + pixX;
		screen[pixlocation] = R;
		screen[pixlocation + 1] = G;
		screen[pixlocation + 2] = B;
	}
*/
WriteScreen:
	//load pixY
	PUSHBP
	PUSHW 12
	ADD
	LW
	//load 640
	PUSHW 640
	// load Pixy * 640
	MUL
	// load PixX
	PUSHBP
	PUSHW 8
	ADD
	LW
	//pixY * 640 + pixX
	ADD
	
	//pix location is now on top of the stack
	
	//index into screen
	PUSHW SCREEN
	PUSHBP
	PUSHW 28
	ADD
	LW
	ADD
	//get value of R
	PUSHBP
	PUSHW 16
	ADD
	LW
	//set screen value
	SB
	
	//index into screen
	PUSHW SCREEN
	PUSHBP
	PUSHW 28
	ADD
	LW
	PUSHW 1
	ADD
	ADD
	//get value of G
	PUSHBP
	PUSHW 20
	ADD
	LW
	//set screen value
	SB
	
	//index into screen
	PUSHW SCREEN
	PUSHBP
	PUSHW 28
	ADD
	LW
	PUSHW 2
	ADD
	ADD
	//get value of B
	PUSHBP
	PUSHW 24
	ADD
	LW
	//set screen value
	SB
	
	RET

//Global vars
CurrX : WORD 0
CurrY : WORD 0
DrawWhite : WORD true
SCREEN : WORD 0